#!/usr/bin/env node

const runner = require('./runner');
const data = require('./data');
const { deepFreeze } = require('../util');
deepFreeze(data);

function deepClone(o) {
    if (!(Object.is(o.constructor, Object) || Object.is(o.constructor, Array))) return o;
    return Array.isArray(o)
        ? o.reduce((acc, v, i) => {
            acc[i] = deepClone(v);
            return acc;
        }, [])
        : Object.entries(o).reduce((acc, [ k, v ]) => {
            acc[k] = deepClone(v);
            return acc;
        }, {});
}

const cloned = deepClone(data);

runner('deepclone-read', 1000, x => {
    [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ].forEach(k => {
        cloned[k].forEach(v => {
            v._id;
            v.index;
            v.guid;
            v.isActive;
            v.balance;
            v.picture;
            v.age;
            v.eyeColor;
            v.name;
            v.name.first;
            v.name.last;
            v.company;
            v.email;
            v.phone;
            v.address;
            v.about;
            v.registered;
            v.latitude;
            v.longitude;
            v.tags.forEach(v => v);
            v.range.forEach(v => v);
            v.friends.forEach(v => {
                v.id;
                v.name;
            });
            v.greeting;
            v.favoriteFruit;
        });
    });
    cloned.h;
    cloned.i;
    cloned.j;
    cloned.k;
    cloned.l;
    cloned.m;
    cloned.n;
    cloned.o;
    cloned.p;
    cloned.q;
    cloned.r;
    cloned.s;
    cloned.t;
    cloned.u;
    cloned.v;
    cloned.w;
    cloned.x;
    cloned.y;
    cloned.z;
});
